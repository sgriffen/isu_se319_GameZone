package gameZone.chess;

import org.junit.Test;

import static org.junit.Assert.*;

public class ChessTest {

    Chess c = new Chess();

    @Test
    public void getBoard() {
        Integer board[][] = new Integer[8][8];
        board[7][0] = 4;
        board[7][1] = 3;
        board[7][2] = 2;
        board[7][3] = 5;
        board[7][4] = 6;
        board[7][5] = 2;
        board[7][6] = 3;
        board[7][7] = 4;
        board[6][0] = 1;
        board[6][1] = 1;
        board[6][2] = 1;
        board[6][3] = 1;
        board[6][4] = 1;
        board[6][5] = 1;
        board[6][6] = 1;
        board[6][7] = 1;
        board[5][0] = 0;
        board[5][1] = 0;
        board[5][2] = 0;
        board[5][3] = 0;
        board[5][4] = 0;
        board[5][5] = 0;
        board[5][6] = 0;
        board[5][7] = 0;
        board[4][0] = 0;
        board[4][1] = 0;
        board[4][2] = 0;
        board[4][3] = 0;
        board[4][4] = 0;
        board[4][5] = 0;
        board[4][6] = 0;
        board[4][7] = 0;
        board[3][0] = 0;
        board[3][1] = 0;
        board[3][2] = 0;
        board[3][3] = 0;
        board[3][4] = 0;
        board[3][5] = 0;
        board[3][6] = 0;
        board[3][7] = 0;
        board[2][0] = 0;
        board[2][1] = 0;
        board[2][2] = 0;
        board[2][3] = 0;
        board[2][4] = 0;
        board[2][5] = 0;
        board[2][6] = 0;
        board[2][7] = 0;
        board[1][0] = 7;
        board[1][1] = 7;
        board[1][2] = 7;
        board[1][3] = 7;
        board[1][4] = 7;
        board[1][5] = 7;
        board[1][6] = 7;
        board[1][7] = 7;
        board[0][0] = 10;
        board[0][1] = 9;
        board[0][2] = 8;
        board[0][3] = 11;
        board[0][4] = 12;
        board[0][5] = 8;
        board[0][6] = 9;
        board[0][7] = 10;
        for(int i = 0; i < 8; i++)
            for(int j = 0; j < 8; j++)
                assertEquals(board[i][j], c.getBoard()[i][j]);
    }

    @Test
    public void setBoard() {
        Integer board[][] = new Integer[8][8];
        board[7][0] = 1;
        board[7][1] = 1;
        board[7][2] = 1;
        board[7][3] = 1;
        board[7][4] = 1;
        board[7][5] = 1;
        board[7][6] = 1;
        board[7][7] = 1;
        board[6][0] = 1;
        board[6][1] = 1;
        board[6][2] = 1;
        board[6][3] = 1;
        board[6][4] = 1;
        board[6][5] = 1;
        board[6][6] = 1;
        board[6][7] = 1;
        board[5][0] = 0;
        board[5][1] = 0;
        board[5][2] = 0;
        board[5][3] = 0;
        board[5][4] = 0;
        board[5][5] = 0;
        board[5][6] = 0;
        board[5][7] = 0;
        board[4][0] = 0;
        board[4][1] = 0;
        board[4][2] = 0;
        board[4][3] = 0;
        board[4][4] = 0;
        board[4][5] = 0;
        board[4][6] = 0;
        board[4][7] = 0;
        board[3][0] = 0;
        board[3][1] = 0;
        board[3][2] = 0;
        board[3][3] = 0;
        board[3][4] = 0;
        board[3][5] = 0;
        board[3][6] = 0;
        board[3][7] = 0;
        board[2][0] = 0;
        board[2][1] = 0;
        board[2][2] = 0;
        board[2][3] = 0;
        board[2][4] = 0;
        board[2][5] = 0;
        board[2][6] = 0;
        board[2][7] = 0;
        board[1][0] = 7;
        board[1][1] = 7;
        board[1][2] = 7;
        board[1][3] = 7;
        board[1][4] = 7;
        board[1][5] = 7;
        board[1][6] = 7;
        board[1][7] = 7;
        board[0][0] = 7;
        board[0][1] = 7;
        board[0][2] = 7;
        board[0][3] = 7;
        board[0][4] = 7;
        board[0][5] = 7;
        board[0][6] = 7;
        board[0][7] = 7;
        c.setBoard(board);
        for(int i = 0; i < 8; i++)
            for(int j = 0; j < 8; j++)
                assertEquals(board[i][j], c.getBoard()[i][j]);
    }

    @Test
    public void AImove() {
        Integer board[][] = new Integer[8][8];
        board[7][0] = 4;
        board[7][1] = 3;
        board[7][2] = 2;
        board[7][3] = 5;
        board[7][4] = 6;
        board[7][5] = 2;
        board[7][6] = 3;
        board[7][7] = 4;
        board[6][0] = 1;
        board[6][1] = 1;
        board[6][2] = 1;
        board[6][3] = 1;
        board[6][4] = 1;
        board[6][5] = 1;
        board[6][6] = 1;
        board[6][7] = 1;
        board[5][0] = 0;
        board[5][1] = 0;
        board[5][2] = 0;
        board[5][3] = 0;
        board[5][4] = 0;
        board[5][5] = 0;
        board[5][6] = 0;
        board[5][7] = 0;
        board[4][0] = 0;
        board[4][1] = 0;
        board[4][2] = 0;
        board[4][3] = 0;
        board[4][4] = 0;
        board[4][5] = 0;
        board[4][6] = 0;
        board[4][7] = 0;
        board[3][0] = 0;
        board[3][1] = 0;
        board[3][2] = 0;
        board[3][3] = 0;
        board[3][4] = 0;
        board[3][5] = 0;
        board[3][6] = 0;
        board[3][7] = 0;
        board[2][0] = 0;
        board[2][1] = 0;
        board[2][2] = 0;
        board[2][3] = 0;
        board[2][4] = 0;
        board[2][5] = 0;
        board[2][6] = 0;
        board[2][7] = 0;
        board[1][0] = 7;
        board[1][1] = 7;
        board[1][2] = 7;
        board[1][3] = 7;
        board[1][4] = 7;
        board[1][5] = 7;
        board[1][6] = 7;
        board[1][7] = 7;
        board[0][0] = 10;
        board[0][1] = 9;
        board[0][2] = 8;
        board[0][3] = 11;
        board[0][4] = 12;
        board[0][5] = 8;
        board[0][6] = 9;
        board[0][7] = 10;
        c.setBoard(board);
        Integer test[][] = c.AImove();
        int x = 0;
        for(int i = 2; i < 6; i++)
            for(int j = 0; j < 8; j++)
                if(test[i][j] == 1 || test[i][j] == 2 || test[i][j] == 3 || test[i][j] == 4 || test[i][j] == 5 || test[i][j] == 6)
                    x++;
        assertEquals(1, x);
    }

    @Test
    public void checkForWin() {
        Integer board[][] = new Integer[8][8];
        board[7][0] = 4;
        board[7][1] = 3;
        board[7][2] = 2;
        board[7][3] = 5;
        board[7][4] = 6;
        board[7][5] = 2;
        board[7][6] = 3;
        board[7][7] = 4;
        board[6][0] = 1;
        board[6][1] = 1;
        board[6][2] = 1;
        board[6][3] = 1;
        board[6][4] = 1;
        board[6][5] = 1;
        board[6][6] = 1;
        board[6][7] = 1;
        board[5][0] = 0;
        board[5][1] = 0;
        board[5][2] = 0;
        board[5][3] = 0;
        board[5][4] = 0;
        board[5][5] = 0;
        board[5][6] = 0;
        board[5][7] = 0;
        board[4][0] = 0;
        board[4][1] = 0;
        board[4][2] = 0;
        board[4][3] = 0;
        board[4][4] = 0;
        board[4][5] = 0;
        board[4][6] = 0;
        board[4][7] = 0;
        board[3][0] = 0;
        board[3][1] = 0;
        board[3][2] = 0;
        board[3][3] = 0;
        board[3][4] = 0;
        board[3][5] = 0;
        board[3][6] = 0;
        board[3][7] = 0;
        board[2][0] = 0;
        board[2][1] = 0;
        board[2][2] = 0;
        board[2][3] = 0;
        board[2][4] = 0;
        board[2][5] = 0;
        board[2][6] = 0;
        board[2][7] = 0;
        board[1][0] = 4;
        board[1][1] = 0;
        board[1][2] = 0;
        board[1][3] = 0;
        board[1][4] = 0;
        board[1][5] = 0;
        board[1][6] = 0;
        board[1][7] = 0;
        board[0][0] = 4;
        board[0][1] = 0;
        board[0][2] = 0;
        board[0][3] = 0;
        board[0][4] = 12;
        board[0][5] = 0;
        board[0][6] = 0;
        board[0][7] = 0;
        c.setBoard(board);
        assertEquals(true, c.checkForWin());
        board[7][0] = 4;
        board[7][1] = 3;
        board[7][2] = 2;
        board[7][3] = 5;
        board[7][4] = 6;
        board[7][5] = 2;
        board[7][6] = 3;
        board[7][7] = 4;
        board[6][0] = 1;
        board[6][1] = 1;
        board[6][2] = 1;
        board[6][3] = 1;
        board[6][4] = 1;
        board[6][5] = 1;
        board[6][6] = 1;
        board[6][7] = 1;
        board[5][0] = 0;
        board[5][1] = 0;
        board[5][2] = 0;
        board[5][3] = 0;
        board[5][4] = 0;
        board[5][5] = 0;
        board[5][6] = 0;
        board[5][7] = 0;
        board[4][0] = 0;
        board[4][1] = 0;
        board[4][2] = 0;
        board[4][3] = 0;
        board[4][4] = 0;
        board[4][5] = 0;
        board[4][6] = 0;
        board[4][7] = 0;
        board[3][0] = 0;
        board[3][1] = 0;
        board[3][2] = 0;
        board[3][3] = 0;
        board[3][4] = 0;
        board[3][5] = 0;
        board[3][6] = 0;
        board[3][7] = 0;
        board[2][0] = 0;
        board[2][1] = 0;
        board[2][2] = 0;
        board[2][3] = 0;
        board[2][4] = 0;
        board[2][5] = 0;
        board[2][6] = 0;
        board[2][7] = 0;
        board[1][0] = 7;
        board[1][1] = 7;
        board[1][2] = 7;
        board[1][3] = 7;
        board[1][4] = 7;
        board[1][5] = 7;
        board[1][6] = 7;
        board[1][7] = 7;
        board[0][0] = 10;
        board[0][1] = 9;
        board[0][2] = 8;
        board[0][3] = 11;
        board[0][4] = 12;
        board[0][5] = 8;
        board[0][6] = 9;
        board[0][7] = 10;
        c.setBoard(board);
        assertEquals(false, c.checkForWin());
    }
}